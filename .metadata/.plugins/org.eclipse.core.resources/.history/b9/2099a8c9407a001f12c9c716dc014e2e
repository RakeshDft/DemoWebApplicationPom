package com.pom.hrm.practice;

public class ExplicitWaitExamples {
	public static void main(String[] args) {
        // Set the path for the ChromeDriver executable
        System.setProperty("webdriver.chrome.driver", "path/to/chromedriver");

        // Initialize WebDriver
        WebDriver driver = new ChromeDriver();
        
        // Navigate to a sample page
        driver.get("https://example.com");

        // Initialize WebDriverWait
        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));

        try {
            // Example 1: TimeoutException (element does not become visible within the timeout)
            WebElement element1 = wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("non-existent-element")));
            element1.click();  // This will not be executed if the element is not found

        } catch (TimeoutException e) {
            System.out.println("TimeoutException: Element not visible within the given time.");

        } catch (NoSuchElementException e) {
            System.out.println("NoSuchElementException: Element not found in the DOM.");

        } catch (ElementClickInterceptedException e) {
            System.out.println("ElementClickInterceptedException: Element is blocked by another element.");
        }

        try {
            // Example 2: StaleElementReferenceException (element becomes stale after being found)
            WebElement element2 = driver.findElement(By.id("stale-element"));
            // Assume page reloads or DOM changes here, making element stale
            WebElement element3 = wait.until(ExpectedConditions.stalenessOf(element2));  // Wait for element to become stale

            // Trying to interact with the stale element
            element2.click();  // This will throw StaleElementReferenceException

        } catch (StaleElementReferenceException e) {
            System.out.println("StaleElementReferenceException: Element is no longer attached to the DOM.");
        }

        try {
            // Example 3: ElementClickInterceptedException (element is covered by another element)
            WebElement button = driver.findElement(By.id("button-id"));
            WebElement overlay = driver.findElement(By.id("overlay-id"));  // Suppose this overlay is blocking the button
            
            // Wait until the button is clickable
            WebElement clickableButton = wait.until(ExpectedConditions.elementToBeClickable(button));
            clickableButton.click();  // Might throw ElementClickInterceptedException if overlay is still present

        } catch (ElementClickInterceptedException e) {
            System.out.println("ElementClickInterceptedException: Click was intercepted by another element.");
        }

        // Close the browser
        driver.quit();
    }

}
