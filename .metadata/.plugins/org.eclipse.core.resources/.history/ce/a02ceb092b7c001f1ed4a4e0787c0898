package com.cucumber.demoopencart.Base;

import java.time.Duration;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.TimeoutException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;

import com.relevantcodes.extentreports.LogStatus;



public class Hooks {
	public static String browser="chrome";
	public static String url="https://demo-opencart.com/";
	public static WebDriver driver;
	public static Actions actions;
	public static WebDriverWait wait;
	public static JavascriptExecutor javascriptexecutor; 
	public static void launchBrowser()
	{
		
		if(browser.equalsIgnoreCase("chrome"))
		{
			driver=new ChromeDriver();
		}
		else if(browser.equalsIgnoreCase("firefox"))
		{
			driver=new FirefoxDriver();
		}
		else if(browser.equalsIgnoreCase("edge"))
		{
			driver=new EdgeDriver();
		}
		else if(browser.equalsIgnoreCase("ie"))
		{
			driver=new InternetExplorerDriver();
		}
		driver.manage().window().maximize();
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(30));
		driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(45));
		actions=new Actions(driver);
		javascriptexecutor= (JavascriptExecutor) driver;
	}
	public static void navigateApplication()
	{
		driver.get(url);
	}
	public static void tearDown()
	{
		driver.quit();
	}
	//*****************click() on WebElement******************************
	public static void clickWebElement(WebElement webElement,String elementName)
	{

		Assert.assertTrue(webElement.isDisplayed()&&webElement.isEnabled());
		System.out.println("the element is found  "+webElement);
		webElement.click();
	}
	//**************click() on WebElement with Actions class method.**************
	public static void clickWebElementwithAction(WebElement webElement,String webElementname)
	{
		Assert.assertTrue(webElement.isDisplayed()&&webElement.isEnabled());
		System.out.println("the element is found  "+webElement);
		 actions.click(webElement).build().perform();
	}
	//************************click() on WebElement by JavaScriptExecuter method**********************
	public static void clickWebElementByJS(WebElement webElement,String elementName)
	{
	 Assert.assertTrue(webElement.isDisplayed()&&webElement.isEnabled());
	 javascriptexecutor.executeScript("arguments[0].click();", webElement);
	}
	
	//*************Click on Hidden WebElement by using JavascriptExecutor Method *************************
		public static void clickOnHiddenWebElementByJS(WebElement webElement,String elementName)
		{
			javascriptexecutor.executeScript("arguments[0].click();", webElement);
			System.out.println("Click on Hidden element successfully done");

		}
		
		//*************Scroll to WebElement by using JavascriptExecutor Method *************************
				public static void scrolltoWebElementJS(WebElement webElement,String elementName)
				{
					javascriptexecutor.executeScript("arguments[0].scrollIntoView(true);", webElement);
					System.out.println("ScrollIntoView element successfully done with Javascript executor");

				}
		//*************Drag and Drop WebElement from source to target by using Actions Method *************************
				public static void dragAndDropActions(WebElement source,WebElement target)
				{
					actions.dragAndDrop(source, target);
					System.out.println("drag&drop successfully done");

				}			
				
				

				//*************Scroll to WebElement by using Action class Method *************************
						public static void scrolltoWebElementAction(WebElement webElement,String elementName)
						{
							actions.scrollToElement(webElement);
							System.out.println("ScrollIntoView element successfully done with Action class");

						}
		
	//*************Wait with Visibility of WebElement*************************
	public static void waitForElementToBeVisible(WebElement webElement)
	{
		try
		{
		wait=new WebDriverWait(driver, Duration.ofSeconds(30));
			wait.until(ExpectedConditions.visibilityOf(webElement));
			webElement.click();
			System.out.println("wait performed in visibilityOf webelement.............");
		}
		catch(TimeoutException e) {
            System.out.println("TimeoutException: Element not visible within the given time.int testwait by method");
		}

	}
	//*************enter testData for TextField *************************
	public static void enterDataBysendKeys(WebElement webElement,String elementName,String testdata)
	{
		try
		{
		Assert.assertTrue(webElement.isDisplayed()&&webElement.isEnabled());
		webElement.sendKeys(testdata);
		System.out.println("wait performed in visibilityOf webelement.............");
		}catch(Exception exception)
		{
			System.out.println("testdata is Not entered: "+ elementName);
		}
	}
	//*************enter testData for TextField *************************
	public static void enterDataByActionClass(WebElement webElement,String elementName,String testdata)
	{
		try {
			Assert.assertTrue(webElement.isDisplayed()&&webElement.isEnabled());
			actions.sendKeys(webElement,testdata).build().perform();
		}catch(Exception exception)
		{
			System.out.println("testdata is Not entered: "+ elementName);
		}
		
	}
	
	
	
}
